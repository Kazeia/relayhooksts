# ...
input AddEditClassModuleInput {
  id: String
  classNumber: Int
  name: String
  videoNewKey: String
  videoLength: String
  videoOldKey: String
  duration: Int
  shortText: String
  moduleId: String
  courseId: String

  # drive or dropbox
  summaryPDFURL: String
  clientMutationId: String
}

# ...
type AddEditClassModulePayload {
  videoPresignURL: String
  acl: String
  clientMutationId: String
}

# ...
input AddEditCourseInput {
  id: String
  discountTimeout: Int
  totalClasses: Int
  discount: Int
  totalPrice: Float
  price: Float
  isNew: Boolean
  free: Boolean
  description: String
  status: String
  backgroundGradient: String
  name: String
  subtitle: String
  teacherId: String
  mainPictureNewKey: String
  mainPictureLength: Int
  mainPictureOldKey: String
  horizontalBannerNewKey: String
  horizontalBannerLength: Int
  horizontalBannerOldKey: String
  clientMutationId: String
}

# ...
type AddEditCoursePayload {
  mainPicturePresignURL: String
  horizontalBannerPresignURL: String
  acl: String
  clientMutationId: String
}

# ...
input AddEditWICourseInput {
  id: String
  class: String
  key: String
  value: String
  courseId: String
}

# ...
input AddEditWLCourseInput {
  id: String
  class: String
  title: String
  subtitle: String
  courseId: String
}

# ...
input AddRemoveCourseCartInput {
  courseId: String!
  cartQty: Int!
  clientMutationId: String
}

# ...
type AddRemoveCourseCartPayload {
  userId: ID!
  cartQty: Int!
  clientMutationId: String
}

# The input on buyCourse
input BuyCourseInput {
  email: String!
  token: String!
  coursesId: [String!]!
  promoCode: String
  clientMutationId: String
}

# The payload on buyCourse
type BuyCoursePayload {
  buyCourseResolver: Boolean!
  clientMutationId: String
}

# Category Type
type Category implements Node {
  id: ID
  name: String
}

# ClassModule Type
type ClassModule implements Node {
  id: ID
  classNumber: Int
  name: String
  mainURL: String
  duration: Int
  shortText: String
  summaryPDFURL: String
  createdAt: String
  updatedAt: String

  # ... Other methods
  completed: Boolean
}

# Course Type
type Course implements Node {
  id: ID
  price: Float
  name: String
  subtitle: String
  isNew: Boolean
  free: Boolean
  discount: Int
  description: String
  horizontalBannerURL: String
  mainPictureURL: String
  backgroundGradient: String
  videoIntroURL: String
  discountTimeout: Int
  totalClasses: Int
  star1: Int
  star2: Int
  star3: Int
  star4: Int
  star5: Int
  totalPrice: Float
  status: String
  createdAt: String
  updatedAt: String

  # ... Other methods
  percentageCompleted: Float
  classesCompleted: Int
  teacher: User
  courseModule: [CourseModule!]
  resources: [CourseResource!]
  whatLearn: [WhatLearn!]
  whatsInclude: [WhatsInclude!]
}

# CourseModule Type
type CourseModule implements Node {
  id: ID
  name: String
  classModules: [ClassModule!]
}

# CourseResource Type
type CourseResource implements Node {
  id: ID
  name: String
  url: String
}

# The input on loginUser
input LoginUserInput {
  token: String!
  clientMutationId: String
}

# The payload on login
type LoginUserPayload {
  viewerResolver: Viewer!
  clientMutationId: String
}

# Public and Private Mutations
type Mutation {
  # **loginUser** public, loginUser ...
  loginUser(input: LoginUserInput!): LoginUserPayload

  # **registerUser** public, registerUser ...
  registerUser(input: RegisterUserInput!): RegisterUserPayload

  # **logoutUser** public, send null cookie
  logoutUser: Boolean!

  # **updateUserProfile** private, update profile User
  updateUserProfile(input: UpdateUserProfileInput!): UpdateUserProfilePayload

  # **addEditCourse** ...
  addEditCourse(input: AddEditCourseInput!): AddEditCoursePayload

  # **addEditWLCourse** ...
  addEditWLCourse(input: AddEditWLCourseInput!): Boolean!

  # **removeWLCourse** ...
  removeWLCourse(id: String!): Boolean!

  # **addEditWICourse** ...
  addEditWICourse(input: AddEditWICourseInput!): Boolean!

  # **removeWICourse** ...
  removeWICourse(id: String!): Boolean!

  # **addEditCourseModule** ...
  addEditCourseModule(id: String, name: String, courseId: String): Boolean!

  # **removeCourseModule** ...
  removeCourseModule(id: String!): Boolean!

  # **addEditClassModule** ...
  addEditClassModule(input: AddEditClassModuleInput!): AddEditClassModulePayload

  # **removeClassModule** ...
  removeClassModule(id: String!, videoKey: String): Boolean!

  # **buyCourse** user can buy an course
  buyCourse(input: BuyCourseInput!): BuyCoursePayload

  # **addCourseToCart** ...
  addCourseToCart(input: AddRemoveCourseCartInput!): AddRemoveCourseCartPayload

  # **removeCourseFromCart** ...
  removeCourseFromCart(input: AddRemoveCourseCartInput!): AddRemoveCourseCartPayload

  # **applyPromoCode** ...
  applyPromoCode(code: String!): Int

  # ...
  classCompleted(courseId: String!, classId: String!, status: Boolean!): Boolean!

  # ...
  saveInTheNewsletter(email: String!): Boolean!

  # ...
  removeUserNewsletter(id: String!): Boolean!

  # ...
  removeAllNewsletter: Boolean!

  # ...
  insertNewPromoCode(code: String!, discount: Int!): Boolean!

  # ...
  removePromoCode(code: String!): Boolean!

  # ...
  removeAllPromoCode: Boolean!

  # ...
  updateStatusPromoCode(code: String!, status: String!): Boolean!
}

# Newsletter Type
type Newsletter implements Node {
  id: ID
  email: String
}

# An object with an ID
interface Node {
  id: ID
}

# Information to aid in pagination, pagination with cursors
type PageInfo {
  startCursor: ID
  endCursor: ID
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

# Post Type
type Post implements Node {
  id: ID
  mainPictureURL: String
  title: String
  description: String
  timeLecture: Int
  contentMD: String
  createdAt: String

  # Joins
  author: User
  categories: [Category!]
}

# ...
type PostCategory {
  category: Category
  totalCount: Int
}

# ...
type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]
  totalCount: Int!
}

# ...
type PostEdge {
  node: Post
  cursor: ID!
}

# Promo Type
type Promo implements Node {
  id: ID
  status: String
  discount: Int
  createdAt: String
  updatedAt: String
}

# Public requests
type Query {
  # **isLoggedIn** is the cookie valid?
  isLoggedIn: Boolean!

  # **Viewer** inside viewer-user 
  viewer: Viewer

  # ...
  allCourses: [Course!]!

  # ...
  courseByName(name: String!): Course

  # ...
  profileById(id: String!): User

  # **teachers** select all teachers
  teachers: [User!]!

  # **posts** get posts of blog with pagination
  posts(after: ID, first: Int, word: String, categoryName: String): PostConnection

  # 3 recent Posts
  recentPosts: [Post!]

  # ...
  blogCategories: [PostCategory!]

  # ...
  postDetail(name: String!): Post
}

# The input on registerUser
input RegisterUserInput {
  fullName: String!
  email: String!
  password: String!
  dateOfBirth: String!
  gender: String!
  captchaCode: String!
  clientMutationId: String
}

# The payload on registerUser
type RegisterUserPayload {
  registerResolver: Boolean!
  clientMutationId: String
}

# Promo Type
type SocialNetwork implements Node {
  id: ID
  name: String
  class: String
  link: String
}

# Promo Type
type Teacher {
  about: String

  # ...
  socialNetworks: [SocialNetwork!]
}

# The input on updateUser
input UpdateUserProfileInput {
  fullName: String!
  biography: String
  imageNewKey: String
  imageOldKey: String
  imageLength: Int
  clientMutationId: String
}

# The payload on updateUser
type UpdateUserProfilePayload {
  imagePresignURL: String
  acl: String
  newProfileURL: String
  clientMutationId: String
}

# User Type
type User implements Node {
  id: ID
  fullName: String
  email: String
  dateOfBirth: String
  gender: String
  profileURL: String
  biography: String
  status: String
  role: String
  createdAt: String
  updatedAt: String

  # Student and teacher as inheritance properties
  teacher: Teacher
}

# Private requests(with token), get on every Query the cookie and select the role!.
type Viewer {
  # **user** Current user logged in
  user(fullInfo: Boolean): User

  # ...
  checkVideoConverted(key: String!): Boolean!

  # ...
  courseInfoInClass(courseId: String!): Course

  # ...
  coursesInCart: [Course!]

  # ...
  acquiredCourses: [Course!]

  # ...
  coursesIdInCart: [String!]

  # ...
  acquiredIdCourses: [String!]

  # ...
  cartQty: Int!

  # ...
  class(classId: String, courseId: String): ClassModule

  # ... group by QueryRole
  usersInTheNewsletter: [Newsletter!]

  # ...
  promoCodes: [Promo!]
}

# WhatLearn Type
type WhatLearn implements Node {
  id: ID
  class: String
  title: String
  subtitle: String
}

# WhatsInclude Type
type WhatsInclude implements Node {
  id: ID
  class: String
  key: String
  value: String
}

